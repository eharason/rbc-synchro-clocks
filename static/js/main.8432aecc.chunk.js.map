{"version":3,"sources":["features/clock/clockSlice.js","features/clock/AnalogClock.js","features/clock/DigitalClock.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["clockSlice","createSlice","name","initialState","hour","Date","getHours","minutes","getMinutes","reducers","setHour","state","action","payload","setMinutes","actions","selectHour","clock","selectMinutes","useStyles","makeStyles","analog","padding","analogHands","width","height","border","borderRadius","position","background","dial","transformOrigin","left","borderLeft","AnalogClock","classes","useState","openHour","setOpenHour","openMinutes","setOpenMinutes","currentAnalogHour","useSelector","currentAnalogMinutes","dispatch","useDispatch","minutesStyle","transform","hoursStyle","errorHours","errorMinutes","className","title","style","onClick","Dialog","open","onClose","TextField","aria-label","defaultValue","onChange","e","target","value","helperText","error","digitalClock","borderColor","borderStyle","color","display","flexDirection","alignItems","digitalNumbers","fontFamily","fontSize","maxWidth","digitalColon","DigitalClock","currentHour","currentMinutes","getSeconds","seconds","setSeconds","useEffect","setTimeout","InputProps","App","Typography","variant","configureStore","reducer","clockReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mTAEaA,EAAaC,YAAY,CAClCC,KAAM,QACNC,aAAc,CACVC,OAAO,IAAIC,MAAOC,WAAW,GAAG,IAAI,KAAM,IAAID,MAAOC,WACrDC,UAAU,IAAIF,MAAOG,aAAa,GAAG,IAAI,KAAM,IAAIH,MAAOG,cAE9DC,SAAU,CACNC,QAAS,SAACC,EAAOC,GACbD,EAAMP,KAAOQ,EAAOC,SAExBC,WAAY,SAACH,EAAOC,GAChBD,EAAMJ,QAAUK,EAAOC,Y,EAKmBb,EAAWe,QAAnCL,G,EAAfN,K,EAAMG,Q,EAASG,SAASI,E,EAAAA,WAC1BE,EAAa,SAAAL,GAAK,OAAIA,EAAMM,MAAMb,MAClCc,EAAgB,SAAAP,GAAK,OAAIA,EAAMM,MAAMV,SAEnCP,IAAf,QCjBMmB,EAAYC,YAAW,CACzBC,OAAQ,CACJC,QAAS,QAEbC,YAAa,CACTC,MAAO,QACPC,OAAQ,QACRC,OAAQ,kBACRC,aAAc,MACdC,SAAU,WACVC,WAAY,SAEhBC,KAAM,CACFF,SAAU,WACVG,gBAAiB,cACjBC,KAAM,MACNP,OAAQ,QACR,UAAW,CACPQ,WAAY,mBAEhB,YAAa,CACTA,WAAY,qBAiETC,MA5DR,WACH,IAAMC,EAAUhB,IADU,EAGMiB,oBAAS,GAHf,mBAGnBC,EAHmB,KAGTC,EAHS,OAIYF,oBAAS,GAJrB,mBAInBG,EAJmB,KAINC,EAJM,KAMpBC,EAAoBC,YAAY1B,GAChC2B,EAAuBD,YAAYxB,GAEnC0B,EAAWC,cAEXC,EAAe,CACjBC,UAAU,UAAD,OAAmC,EAAvBJ,EAAZ,SAEPK,EAAa,CACfD,UAAU,UAAD,OAAgC,GAApBN,EAAZ,SAePQ,EAAaR,EAAoB,GACjCS,EAAeP,EAAuB,GAE5C,OACI,yBAAKQ,UAAWhB,EAAQd,QACpB,yBAAK8B,UAAWhB,EAAQZ,aACpB,yBAAK6B,MAAO,cAAeD,UAAS,UAAKhB,EAAQL,KAAb,YAA6BuB,MAAOP,EAAcQ,QAnBxE,WACtBd,GAAe,MAmBP,yBAAKY,MAAO,YAAaD,UAAS,UAAKhB,EAAQL,KAAb,UAA2BuB,MAAOL,EAAYM,QAdrE,WACnBhB,GAAY,MAcJ,kBAACiB,EAAA,EAAD,CAAQC,KAAMnB,EAAUoB,QAZZ,WACpBnB,GAAY,KAYA,kBAACoB,EAAA,EAAD,CACIC,aAAW,2BACXC,aAAcnB,EACdoB,SAAU,SAAAC,GAAC,OAAIlB,EAASlC,EAAQoD,EAAEC,OAAOC,SACzCC,WAAYhB,EAAa,kCAAoC,GAC7DiB,MAAOjB,KAGf,kBAACM,EAAA,EAAD,CAAQC,KAAMjB,EAAakB,QA3BZ,WACvBjB,GAAe,KA2BH,kBAACkB,EAAA,EAAD,CACIC,aAAW,8BACXC,aAAcjB,EACdkB,SAAU,SAAAC,GAAC,OAAIlB,EAAS9B,EAAWgD,EAAEC,OAAOC,SAC5CC,WAAYf,EAAe,oCAAsC,GACjEgB,MAAOhB,QC/EzB/B,EAAYC,YAAW,CACzB+C,aAAc,CACVtC,WAAY,QACZH,OAAQ,GACR0C,YAAa,OACbC,YAAa,QACb1C,aAAc,EACd2C,MAAO,QACPhD,QAAS,SACTiD,QAAS,OACTC,cAAe,MACfC,WAAY,UAEhBC,eAAgB,CACZJ,MAAO,MACPK,WAAY,UACZC,SAAU,QACVC,SAAU,SAEdC,aAAc,CACVR,MAAO,MACPK,WAAY,UACZC,SAAU,QACVC,SAAU,UAsDHE,MAlDR,WACH,IAAM5C,EAAUhB,IAEV6D,EAActC,YAAY1B,GAC1BiE,EAAiBvC,YAAYxB,GAJR,EAMGkB,qBAAU,IAAI/B,MAAO6E,aAAa,GAAG,IAAI,KAAM,IAAI7E,MAAO6E,cAN7D,mBAMpBC,EANoB,KAMXC,EANW,KAU3BC,qBAAU,WACNC,YAAW,WACPF,IAJI,IAAI/E,MAAO6E,aAAa,GAAG,IAAI,KAAM,IAAI7E,MAAO6E,gBAKrD,QAGP,IAAMtC,EAAWC,cAEXI,EAAa+B,EAAc,GAC3B9B,EAAe+B,EAAiB,GAEtC,OACI,yBAAK9B,UAAWhB,EAAQgC,cACpB,kBAACT,EAAA,EAAD,CACIC,aAAW,4BACXK,MAAOgB,EACPnB,SAAU,SAAAC,GAAC,OAAIlB,EAASlC,EAAQoD,EAAEC,OAAOC,SACzCC,WAAYhB,EAAa,kCAAoC,GAC7DiB,MAAOjB,EACPsC,WAAY,CACRpC,UAAWhB,EAAQuC,kBAG3B,yBAAKvB,UAAWhB,EAAQ2C,cAAxB,KACA,kBAACpB,EAAA,EAAD,CACIC,aAAW,+BACXK,MAAOiB,EACPpB,SAAU,SAAAC,GAAC,OAAIlB,EAAS9B,EAAWgD,EAAEC,OAAOC,SAC5CC,WAAYf,EAAe,oCAAsC,GACjEgB,MAAOhB,EACPqC,WAAY,CACRpC,UAAWhB,EAAQuC,kBAG3B,yBAAKvB,UAAWhB,EAAQ2C,cAAxB,KACA,yBAAK3B,UAAWhB,EAAQuC,gBAAiBS,K,cCxDtCK,MAff,WACE,OACE,yBAAKrC,UAAU,OACb,yBAAKA,UAAU,YACb,kBAACsC,EAAA,EAAD,CAAYC,QAAQ,MAApB,mCACA,kBAACD,EAAA,EAAD,CAAYC,QAAQ,MAApB,oEAGA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCZOC,cAAe,CAC5BC,QAAS,CACP3E,MAAO4E,KCOSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8432aecc.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const clockSlice = createSlice({\n    name: 'clock',\n    initialState: {\n        hour: (new Date().getHours()<10?'0':'') + new Date().getHours(),\n        minutes: (new Date().getMinutes()<10?'0':'') + new Date().getMinutes()\n    },\n    reducers: {\n        setHour: (state, action) => {\n            state.hour = action.payload;\n        },\n        setMinutes: (state, action) => {\n            state.minutes = action.payload;\n        },\n    },\n});\n\nexport const { hour, minutes, setHour, setMinutes } = clockSlice.actions;\nexport const selectHour = state => state.clock.hour;\nexport const selectMinutes = state => state.clock.minutes;\n\nexport default clockSlice.reducer;\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Dialog, TextField, makeStyles } from '@material-ui/core';\nimport { setHour, setMinutes, selectHour, selectMinutes } from './clockSlice'\n\nconst useStyles = makeStyles({\n    analog: {\n        padding: '30px'\n    },\n    analogHands: {\n        width: '300px',\n        height: '300px',\n        border: 'solid 20px grey',\n        borderRadius: '50%',\n        position: 'relative',\n        background: \"white\"\n    },\n    dial: {\n        position: 'absolute',\n        transformOrigin: 'bottom left',\n        left: '50%',\n        height: '150px',\n        '&.hours': {\n            borderLeft: 'solid 15px teal',\n        },\n        '&.minutes': {\n            borderLeft: 'solid 15px red',\n        }\n    }\n})\n\nexport function AnalogClock() {\n    const classes = useStyles();\n\n    const [openHour, setOpenHour] = useState(false);\n    const [openMinutes, setOpenMinutes] = useState(false);\n\n    const currentAnalogHour = useSelector(selectHour);\n    const currentAnalogMinutes = useSelector(selectMinutes);\n\n    const dispatch = useDispatch();\n\n    const minutesStyle = {\n        transform: `rotate(${currentAnalogMinutes * 6}deg)`\n    };\n    const hoursStyle = {\n        transform: `rotate(${currentAnalogHour * 30}deg)`\n    };\n    const handleMinutesOpen = () => {\n        setOpenMinutes(true)\n    }\n    const handleMinutesClose = () => {\n        setOpenMinutes(false)\n    }\n    const handleHourOpen = () => {\n        setOpenHour(true)\n    }\n    const handleHourClose = () => {\n        setOpenHour(false)\n    }\n\n    const errorHours = currentAnalogHour > 23;\n    const errorMinutes = currentAnalogMinutes > 60;\n    \n    return (\n        <div className={classes.analog}>\n            <div className={classes.analogHands}>\n                <div title={\"minute hand\"} className={`${classes.dial} minutes`} style={minutesStyle} onClick={handleMinutesOpen} />\n                <div title={\"hour hand\"} className={`${classes.dial} hours`} style={hoursStyle} onClick={handleHourOpen} />\n                <Dialog open={openHour} onClose={handleHourClose} >\n                    <TextField\n                        aria-label=\"Set hour on analog clock\"\n                        defaultValue={currentAnalogHour}\n                        onChange={e => dispatch(setHour(e.target.value))}\n                        helperText={errorHours ? \"Hours must be between 00 and 23\" : \"\"}\n                        error={errorHours}\n                        />\n                </Dialog>\n                <Dialog open={openMinutes} onClose={handleMinutesClose} >\n                    <TextField\n                        aria-label=\"Set minutes on analog clock\"\n                        defaultValue={currentAnalogMinutes}\n                        onChange={e => dispatch(setMinutes(e.target.value))}\n                        helperText={errorMinutes ? \"Minutes must be between 00 and 60\" : \"\"}\n                        error={errorMinutes}/>\n                </Dialog>\n            </div>\n        </div>\n    );\n}\n\nexport default AnalogClock\n","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { TextField, makeStyles } from '@material-ui/core';\nimport { setHour, setMinutes, selectHour, selectMinutes } from './clockSlice'\n\nconst useStyles = makeStyles({\n    digitalClock: {\n        background: 'black',\n        border: 20,\n        borderColor: 'grey',\n        borderStyle: 'solid',\n        borderRadius: 3,\n        color: 'white',\n        padding: '0 30px',\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: 'center'\n    },\n    digitalNumbers: {\n        color: 'red',\n        fontFamily: 'Courier',\n        fontSize: \"100px\",\n        maxWidth: \"155px\"\n    },\n    digitalColon: {\n        color: 'red',\n        fontFamily: 'Courier',\n        fontSize: \"100px\",\n        maxWidth: \"55px\"\n    }\n});\n\nexport function DigitalClock() {\n    const classes = useStyles();\n\n    const currentHour = useSelector(selectHour);\n    const currentMinutes = useSelector(selectMinutes);\n\n    const [seconds, setSeconds] = useState((new Date().getSeconds()<10?'0':'') + new Date().getSeconds());\n    const renderSeconds = () => {\n        return (new Date().getSeconds()<10?'0':'') + new Date().getSeconds();\n    };\n    useEffect(() => {\n        setTimeout(() => {\n            setSeconds(renderSeconds());\n        }, 1000);\n    });\n\n    const dispatch = useDispatch();\n\n    const errorHours = currentHour > 23;\n    const errorMinutes = currentMinutes > 60;\n\n    return (\n        <div className={classes.digitalClock}>\n            <TextField\n                aria-label=\"Set hour on digital clock\"\n                value={currentHour}\n                onChange={e => dispatch(setHour(e.target.value))}\n                helperText={errorHours ? \"Hours must be between 00 and 23\" : \"\"}\n                error={errorHours}\n                InputProps={{\n                    className: classes.digitalNumbers\n                }}\n            />\n            <div className={classes.digitalColon}>:</div>\n            <TextField\n                aria-label=\"Set minutes on digital clock\"\n                value={currentMinutes}\n                onChange={e => dispatch(setMinutes(e.target.value))}\n                helperText={errorMinutes ? \"Minutes must be between 00 and 60\" : \"\"}\n                error={errorMinutes}\n                InputProps={{\n                    className: classes.digitalNumbers\n                }}\n            />\n            <div className={classes.digitalColon}>:</div>\n            <div className={classes.digitalNumbers}>{seconds}</div>\n        </div>\n    )\n}\n\nexport default DigitalClock\n","import React from 'react';\r\nimport AnalogClock from './features/clock/AnalogClock';\r\nimport DigitalClock from './features/clock/DigitalClock';\r\nimport { Typography } from '@material-ui/core';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"App-body\">\r\n        <Typography variant=\"h3\">Clock Synchronization Challenge</Typography>\r\n        <Typography variant=\"h5\">\r\n          Update the time using a 24-hour clock. Seconds are in real time.\r\n        </Typography>\r\n        <AnalogClock />\r\n        <DigitalClock />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport clockReducer from '../features/clock/clockSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    clock: clockReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}